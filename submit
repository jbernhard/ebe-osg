#!/bin/bash

set -e


#
# settings
#

# max run time (seconds)
# jobs that run longer than this are placed on hold and subsequently restarted
# set this to a time somewhat longer than a job could reasonably run
# i.e. if it gets here, something must have gone wrong
MAX_WALL_TIME=21600   # 6 hours

# maximum number of times to retry a job
MAX_RETRIES=10

# minimum memory in megabytes
# this is RAM, not disk space
# every machine has at least a few gigabytes
MIN_MEMORY=1024

# gridftp destination
# files will be placed in "$DEST_URL/$RUN_ID"
# this will copy files to nukeserv at Duke
# if your username is not the same on OSG as at Duke, you must enter your Duke username manually
# you must give your grid certificate [the output of voms-proxy-info] to Jimmy so he can add it to the Duke gridftp keychain
DEST_URL="gsiftp://ntheoryfs01.phy.duke.edu/var/phy/project/nukeserv/$USER/ebe/osg-staging"
# alternatively, you may copy results back to the submit host
#DEST_URL="gsiftp://${HOSTNAME}/path/to/results/folder"

# your OSG project name
OSG_PROJECT_NAME="Duke-QGP"

# Condor log files will be placed here
# if you are running many jobs, this can quickly become very large
# choose a location in e.g. scratch space
# these files are only for debugging and need not be retained permanently
LOG_DIR="/local-scratch/$USER/ebe-osg-logs"


#
# initialization
#

# load output functions
source lib/msg

# password stored here
PW_FILE='.vomspw'

msg 'EbE-OSG job generator and submitter'

# check that first argument is a positive integer
# otherwise print usage information
if ! (( $1 > 0 )) 2> /dev/null; then
  cat <<EOF
Usage:  $0 number_of_jobs [input_files ...]

Generate and submit jobs to the OSG.

Required argument:
  number_of_jobs = positive integer

Optional arguments:
  input_files = relative path[s] to input file[s]

This script automatically creates a new voms-proxy if necessary.  For convenience, the password will be read
from the file $PW_FILE in this directory.  If the file is not present, the password will be requested normally.
EOF
  exit 1
fi

# first argument is number of jobs to submit
NUM_RUNS=$1

# remaining arguments are input files
shift 
INPUT_FILES=$@

for F in ${INPUT_FILES[@]}; do
  INPUT_FILES_JOINED="${INPUT_FILES_JOINED}_`basename $F`"
done

# init proxy if not enough time remains
echo
if voms-proxy-info -exists -hours 168 2> /dev/null; then
  msg 'voms-proxy is valid'
else
  warning "voms-proxy too old or doesn't exist, creating a new one"
  if [[ -f $PW_FILE ]];  then
    msg2 "reading password from $PW_FILE"

    perm=$(stat -c %a $PW_FILE)
    [[ "$perm" != '600' ]] && {
      warning "$PW_FILE permissions are $perm (`stat -c %A $PW_FILE`), recommended permissions are 600 (-rw-------)"
      read -p 'chmod 600 $PW_FILE? [y/N] ' ch
      [[ "$ch" == 'y' ]] && chmod -v 600 $PW_FILE
    }

    voms-proxy-init -voms osg -valid 720:00 -pwstdin < $PW_FILE
  else
    msg2 'file $PW_FILE does not exist, requesting password input'
    voms-proxy-init -voms osg -valid 720:00
  fi
fi

# top dir
TOP_DIR=$PWD

# gridftp source location
SRC_URL="gsiftp://${HOSTNAME}${TOP_DIR}"



#
# generate jobs
#

echo
msg "generating $NUM_RUNS jobs for input file[s] ${INPUT_FILES[@]}"

# generate run id
RUN_ID="`/bin/date +'%F_%H%M%S'`_${NUM_RUNS}jobs${INPUT_FILES_JOINED}"
msg2 "run ID:  $RUN_ID"

# create run dir and subfolders
RUN_DIR=$LOG_DIR/$RUN_ID
mkdir -p $RUN_DIR
cd $RUN_DIR

USER_ID=`id -u`
submitfile='submitfile'

cat > $submitfile <<EOF
universe = vanilla

+ProjectName = "$OSG_PROJECT_NAME"

x509userproxy = /tmp/x509up_u$USER_ID

requirements = OpSys == "LINUX" && ( Arch == "INTEL" || Arch == "X86_64" )
request_memory = $MIN_MEMORY

periodic_release = ((CurrentTime - EnteredCurrentStatus) > 600) && (NumJobStarts <= $MAX_RETRIES)
periodic_hold = (JobStatus==2) && ((CurrentTime - EnteredCurrentStatus) > ($MAX_WALL_TIME))
on_exit_hold = (ExitBySignal == True) || (ExitCode != 0)

executable = $TOP_DIR/lib/remote-job-wrapper
arguments = $RUN_ID \$(Process) $SRC_URL $DEST_URL ${INPUT_FILES[@]}

should_transfer_files = YES
+TransferOutput = ""

output = \$(Process).out
error = \$(Process).err
log = \$(Process).log

notification = NEVER

queue $NUM_RUNS
EOF

echo
msg 'submitting jobs'
condor_submit $submitfile
